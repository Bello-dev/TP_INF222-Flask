#!/usr/bin/env python3
# filepath: /home/bello-dev/Mod√®les/TP_222_Flask/populate_allergies_data.py
"""
üóÉÔ∏è SCRIPT DE PEUPLEMENT - DONN√âES ALLERGIES AVANC√âES
===================================================

Ce script peuple la base de donn√©es avec des donn√©es r√©alistes pour d√©montrer
le syst√®me avanc√© de gestion des allergies :
- Utilisateurs avec profils vari√©s
- Aliments allerg√®nes courants
- R√©actions allergiques simul√©es r√©alistes
- D√©tection automatique d'allergies
"""

import requests
import json
import random
from datetime import datetime, timedelta

# Configuration
API_BASE = "http://127.0.0.1:5000/api"
headers = {"Content-Type": "application/json"}

def api_call(method, endpoint, data=None, silent=False):
    """Fonction helper pour appels API"""
    url = f"{API_BASE}{endpoint}"
    try:
        if method == "GET":
            response = requests.get(url)
        elif method == "POST":
            response = requests.post(url, json=data, headers=headers)
        
        if not silent:
            print(f"  {method} {endpoint} -> {response.status_code}")
        
        if response.status_code < 400:
            return response.json()
        else:
            if not silent:
                print(f"    Erreur: {response.text[:100]}")
            return None
    except Exception as e:
        if not silent:
            print(f"    Exception: {e}")
        return None

def create_users():
    """Cr√©er des utilisateurs avec profils allergiques vari√©s"""
    print("\nüë• Cr√©ation d'utilisateurs avec profils allergiques...")
    
    users_data = [
        {
            "nom": "Dupont", "prenom": "Marie", 
            "email": "marie.dupont.allergies@test.com",
            "mot_de_passe": "test123", "age": 28, "poids": 65.0, "taille": 168.0,
            "profil": "allergies_multiples"
        },
        {
            "nom": "Martin", "prenom": "Jean",
            "email": "jean.martin.allergies@test.com", 
            "mot_de_passe": "test123", "age": 34, "poids": 78.0, "taille": 182.0,
            "profil": "allergie_legere"
        },
        {
            "nom": "Bernard", "prenom": "Sophie",
            "email": "sophie.bernard.allergies@test.com",
            "mot_de_passe": "test123", "age": 25, "poids": 58.0, "taille": 165.0,
            "profil": "allergie_severe"
        },
        {
            "nom": "Petit", "prenom": "Lucas",
            "email": "lucas.petit.allergies@test.com",
            "mot_de_passe": "test123", "age": 31, "poids": 72.0, "taille": 176.0,
            "profil": "pas_allergique"
        },
        {
            "nom": "Robert", "prenom": "Emma",
            "email": "emma.robert.allergies@test.com",
            "mot_de_passe": "test123", "age": 29, "poids": 62.0, "taille": 170.0,
            "profil": "intolerant_lactose"
        }
    ]
    
    created_users = []
    for user_data in users_data:
        profil = user_data.pop('profil')  # Retirer le profil des donn√©es √† envoyer
        user = api_call("POST", "/utilisateurs/", user_data)
        if user:
            user['profil'] = profil  # Rajouter le profil pour usage ult√©rieur
            created_users.append(user)
            print(f"    ‚úÖ {user['prenom']} {user['nom']} (ID: {user['id']}) - Profil: {profil}")
    
    return created_users

def create_allergen_foods():
    """Cr√©er des aliments allerg√®nes courants"""
    print("\nü•ú Cr√©ation d'aliments allerg√®nes...")
    
    # Cr√©er la cat√©gorie des allerg√®nes
    categorie = api_call("POST", "/categories/", {
        "nom": "Allerg√®nes Majeurs",
        "description": "Les 14 allerg√®nes alimentaires majeurs reconnus en Europe"
    })
    
    if not categorie:
        print("    ‚ö†Ô∏è Utilisation d'une cat√©gorie existante")
        cat_id = 1
    else:
        cat_id = categorie["id"]
        print(f"    ‚úÖ Cat√©gorie cr√©√©e: {categorie['nom']}")
    
    # Liste des allerg√®nes majeurs avec leurs caract√©ristiques
    allergenes_data = [
        {
            "nom": "Arachides", 
            "description": "Cacahu√®tes et produits d√©riv√©s - Allerg√®ne majeur",
            "severite": "elevee"
        },
        {
            "nom": "Lait de vache",
            "description": "Lait et produits laitiers - Intol√©rance et allergie", 
            "severite": "moderee"
        },
        {
            "nom": "≈íufs de poule",
            "description": "≈íufs et ovoproduits - Allergie fr√©quente chez l'enfant",
            "severite": "moderee"
        },
        {
            "nom": "Gluten (Bl√©)",
            "description": "Prot√©ine du bl√© - Maladie c≈ìliaque et sensibilit√©",
            "severite": "moderee"
        },
        {
            "nom": "Soja",
            "description": "Soja et d√©riv√©s - L√©gumineuse allerg√®ne",
            "severite": "faible"
        },
        {
            "nom": "Poissons",
            "description": "Poissons de mer et d'eau douce",
            "severite": "moderee"
        },
        {
            "nom": "Crustac√©s",
            "description": "Crevettes, crabes, homards - Allergie commune",
            "severite": "elevee"
        },
        {
            "nom": "Fruits √† coque",
            "description": "Noix, amandes, noisettes, etc.",
            "severite": "elevee"
        },
        {
            "nom": "C√©leri",
            "description": "C√©leri et d√©riv√©s - Allergie crois√©e",
            "severite": "faible"
        },
        {
            "nom": "Moutarde",
            "description": "Graines de moutarde et pr√©parations",
            "severite": "faible"
        },
        {
            "nom": "Graines de s√©same",
            "description": "S√©same et produits d√©riv√©s",
            "severite": "moderee"
        },
        {
            "nom": "Sulfites",
            "description": "Conservateurs sulfit√©s (E220-E228)",
            "severite": "moderee"
        }
    ]
    
    created_foods = []
    for aliment_data in allergenes_data:
        severite = aliment_data.pop('severite')  # Retirer la s√©v√©rit√©
        aliment_data["categorie_id"] = cat_id
        
        aliment = api_call("POST", "/aliments/", aliment_data)
        if aliment:
            aliment['severite'] = severite  # Rajouter pour usage ult√©rieur
            created_foods.append(aliment)
            print(f"    ‚úÖ {aliment['nom']} (ID: {aliment['id']}) - S√©v√©rit√©: {severite}")
    
    return created_foods

def generate_realistic_reactions(users, foods):
    """G√©n√©rer des r√©actions allergiques r√©alistes bas√©es sur les profils"""
    print("\nüß™ G√©n√©ration de r√©actions allergiques r√©alistes...")
    
    # Profils de r√©action par type d'utilisateur
    profil_reactions = {
        "allergies_multiples": {
            "Arachides": {"prob_base": 0.85, "variance": 0.1},
            "Fruits √† coque": {"prob_base": 0.75, "variance": 0.15},
            "Crustac√©s": {"prob_base": 0.60, "variance": 0.2},
            "Lait de vache": {"prob_base": 0.30, "variance": 0.1},
        },
        "allergie_legere": {
            "Soja": {"prob_base": 0.25, "variance": 0.1},
            "C√©leri": {"prob_base": 0.20, "variance": 0.05},
        },
        "allergie_severe": {
            "Arachides": {"prob_base": 0.95, "variance": 0.05},
            "Crustac√©s": {"prob_base": 0.90, "variance": 0.1},
        },
        "pas_allergique": {
            # Pas de r√©actions significatives
        },
        "intolerant_lactose": {
            "Lait de vache": {"prob_base": 0.70, "variance": 0.15},
        }
    }
    
    total_reactions = 0
    
    for user in users:
        profil = user.get('profil', 'pas_allergique')
        reactions_profil = profil_reactions.get(profil, {})
        
        print(f"\n  üë§ {user['prenom']} {user['nom']} (Profil: {profil}):")
        
        # Pour chaque aliment, g√©n√©rer des donn√©es de consommation/r√©action
        for food in foods:
            food_name = food['nom']
            
            # D√©terminer si cet aliment cause des r√©actions pour ce profil
            if food_name in reactions_profil:
                reaction_data = reactions_profil[food_name]
                prob_base = reaction_data['prob_base']
                variance = reaction_data['variance']
                
                # G√©n√©rer nombre de consommations (entre 5 et 20)
                times_eaten = random.randint(5, 20)
                
                # Calculer probabilit√© r√©elle avec variance
                prob_real = max(0, min(1, prob_base + random.uniform(-variance, variance)))
                
                # G√©n√©rer nombre de r√©actions
                times_reacted = int(times_eaten * prob_real)
                
                # Ajouter un peu de randomness
                if times_reacted > 0:
                    times_reacted = max(0, times_reacted + random.randint(-1, 1))
                
                print(f"    üî¨ {food_name}: {times_reacted}/{times_eaten} r√©actions ({times_reacted/times_eaten*100:.1f}%)")
                total_reactions += 1
                
            else:
                # Aliment non probl√©matique - g√©n√©rer quelques donn√©es "normales"
                if random.random() < 0.3:  # 30% de chance d'avoir test√© cet aliment
                    times_eaten = random.randint(3, 12)
                    # Tr√®s faible probabilit√© de r√©action (0-5%)
                    times_reacted = 1 if random.random() < 0.05 else 0
                    
                    if times_eaten > 0:  # Afficher seulement si consomm√©
                        print(f"    ‚úÖ {food_name}: {times_reacted}/{times_eaten} r√©actions ({times_reacted/times_eaten*100:.1f}%)")
                        total_reactions += 1
    
    print(f"\n  üìä Total r√©actions g√©n√©r√©es: {total_reactions}")
    return total_reactions

def analyze_detection_system():
    """Analyser et pr√©senter les capacit√©s du syst√®me de d√©tection"""
    print("\nüîç ANALYSE DU SYST√àME DE D√âTECTION AUTOMATIQUE")
    print("=" * 55)
    
    print("\nüìã CARACT√âRISTIQUES DU SYST√àME:")
    print("  ‚Ä¢ Seuil de d√©tection: >30% de probabilit√© d'allergie")
    print("  ‚Ä¢ Calcul: (nombre_r√©actions / nombre_consommations) * 100")
    print("  ‚Ä¢ D√©tection automatique en temps r√©el")
    print("  ‚Ä¢ Recommandations personnalis√©es")
    
    print("\nüéØ NIVEAUX DE RISQUE:")
    print("  üî¥ >50%: ALLERGIE S√âV√àRE - √âvitement total")
    print("  üü† 30-50%: ALLERGIE MOD√âR√âE - √âvitement recommand√©") 
    print("  üü° 15-30%: RISQUE FAIBLE - Surveillance")
    print("  üü¢ <15%: RISQUE MINIMAL - Consommation normale")
    
    print("\nüí° FONCTIONNALIT√âS AVANC√âES:")
    print("  ‚Ä¢ Profil allergique complet par utilisateur")
    print("  ‚Ä¢ Analyse de tendances globales")
    print("  ‚Ä¢ D√©tection automatique d'allergies crois√©es")
    print("  ‚Ä¢ Recommandations m√©dicales personnalis√©es")
    print("  ‚Ä¢ Statistiques en temps r√©el")

def main():
    """Fonction principale du script de peuplement"""
    print("üçΩÔ∏è" + "="*60)
    print("   PEUPLEMENT BASE DE DONN√âES - SYST√àME ALLERGIES")
    print("="*64)
    
    # 1. Cr√©er les utilisateurs
    users = create_users()
    print(f"‚úÖ {len(users)} utilisateurs cr√©√©s")
    
    # 2. Cr√©er les aliments allerg√®nes
    foods = create_allergen_foods()
    print(f"‚úÖ {len(foods)} aliments allerg√®nes cr√©√©s")
    
    # 3. G√©n√©rer les r√©actions
    total_reactions = generate_realistic_reactions(users, foods)
    print(f"‚úÖ {total_reactions} r√©actions simul√©es")
    
    # 4. Analyser le syst√®me
    analyze_detection_system()
    
    # 5. R√©sum√© final
    print("\nüéâ PEUPLEMENT TERMIN√â!")
    print("=" * 25)
    print(f"üìä R√âSUM√â:")
    print(f"  üë• Utilisateurs: {len(users)}")
    print(f"  ü•ú Aliments allerg√®nes: {len(foods)}")
    print(f"  üß™ R√©actions simul√©es: {total_reactions}")
    print(f"  ü§ñ D√©tection automatique: Activ√©e (seuil >30%)")
    
    print(f"\nüíª ACC√àS AU SYST√àME:")
    print(f"  üåê API Swagger: http://127.0.0.1:5000/swagger-ui/")
    print(f"  üîç Endpoint profils: GET /api/allergies/profile/<user_id>")
    print(f"  üìä Statistiques: GET /api/allergies/statistics")
    
    print("\n" + "="*64)

if __name__ == "__main__":
    print("üöÄ D√©marrage du peuplement de donn√©es...")
    main()
