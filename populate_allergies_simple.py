#!/usr/bin/env python3
"""
üóÉÔ∏è SCRIPT DE PEUPLEMENT SIMPLE - DONN√âES ALLERGIES
==================================================

Script simplifi√© pour peupler la base de donn√©es avec des donn√©es d'allergies
sans d√©pendances externes.
"""

from run import app
from app.model import (db, Utilisateur, Aliment, Categorie, Allergie, 
                      ReactionAllergique, AllergieUtilisateur)
from datetime import datetime, timedelta
import random

def populate_basic_allergies():
    """Peuple la base de donn√©es avec des donn√©es d'allergies de base"""
    
    with app.app_context():
        print("üöÄ D√©marrage du peuplement des donn√©es d'allergies...")
        
        # 1. Cr√©er la cat√©gorie allerg√®nes si elle n'existe pas
        categorie_allergenes = Categorie.query.filter_by(nom="Allerg√®nes").first()
        if not categorie_allergenes:
            categorie_allergenes = Categorie(
                nom="Allerg√®nes",
                description="Aliments allerg√®nes courants"
            )
            db.session.add(categorie_allergenes)
            db.session.commit()
            print("‚úÖ Cat√©gorie 'Allerg√®nes' cr√©√©e")
        
        # 2. Cr√©er les allerg√®nes principaux
        allergenes_data = [
            {"nom": "Arachides", "description": "Cacahu√®tes et d√©riv√©s"},
            {"nom": "Lait", "description": "Lactose et prot√©ines laiti√®res"},
            {"nom": "Oeufs", "description": "Prot√©ines d'≈ìuf"},
            {"nom": "Gluten", "description": "Prot√©ines de bl√©, orge, seigle"},
            {"nom": "Soja", "description": "Prot√©ines de soja"},
            {"nom": "Fruits √† coque", "description": "Noix, amandes, noisettes"},
            {"nom": "Poisson", "description": "Prot√©ines de poisson"},
            {"nom": "Crustac√©s", "description": "Crevettes, crabes, homards"}
        ]
        
        allergenes_crees = []
        for allergen_info in allergenes_data:
            aliment = Aliment.query.filter_by(nom=allergen_info["nom"]).first()
            if not aliment:
                aliment = Aliment(
                    nom=allergen_info["nom"],
                    description=allergen_info["description"],
                    categorie_id=categorie_allergenes.id,
                    calories=200,  # Valeur par d√©faut
                    proteines=10.0,
                    glucides=20.0,
                    lipides=15.0
                )
                db.session.add(aliment)
                allergenes_crees.append(aliment)
        
        db.session.commit()
        print(f"‚úÖ {len(allergenes_crees)} aliments allerg√®nes cr√©√©s")
        
        # 3. Cr√©er les allergies de base
        allergies_data = [
            {"nom": "Allergie aux arachides", "description": "R√©action aux cacahu√®tes", "gravite": "S√©v√®re"},
            {"nom": "Intol√©rance au lactose", "description": "Difficult√© √† dig√©rer le lactose", "gravite": "Mod√©r√©e"},
            {"nom": "Allergie aux ≈ìufs", "description": "R√©action aux prot√©ines d'≈ìuf", "gravite": "Mod√©r√©e"},
            {"nom": "Maladie c≈ìliaque", "description": "Intol√©rance au gluten", "gravite": "S√©v√®re"},
            {"nom": "Allergie au soja", "description": "R√©action aux prot√©ines de soja", "gravite": "Mod√©r√©e"}
        ]
        
        allergies_creees = []
        for allergie_info in allergies_data:
            allergie = Allergie.query.filter_by(nom=allergie_info["nom"]).first()
            if not allergie:
                allergie = Allergie(
                    nom=allergie_info["nom"],
                    description=allergie_info["description"],
                    gravite=allergie_info["gravite"]
                )
                db.session.add(allergie)
                allergies_creees.append(allergie)
        
        db.session.commit()
        print(f"‚úÖ {len(allergies_creees)} allergies cr√©√©es")
        
        # 4. R√©cup√©rer les utilisateurs existants
        utilisateurs = Utilisateur.query.limit(5).all()
        if not utilisateurs:
            print("‚ùå Aucun utilisateur trouv√©. Veuillez d'abord cr√©er des utilisateurs.")
            return
        
        print(f"üë• {len(utilisateurs)} utilisateurs trouv√©s")
        
        # 5. R√©cup√©rer les aliments allerg√®nes
        aliments_allergenes = Aliment.query.filter_by(categorie_id=categorie_allergenes.id).all()
        print(f"ü•ú {len(aliments_allergenes)} aliments allerg√®nes disponibles")
        
        # 6. Cr√©er des r√©actions allergiques r√©alistes
        reactions_creees = 0
        for utilisateur in utilisateurs:
            print(f"üìä Cr√©ation de r√©actions pour {utilisateur.prenom} {utilisateur.nom}")
            
            # Chaque utilisateur teste entre 3 et 6 aliments
            aliments_testes = random.sample(aliments_allergenes, min(random.randint(3, 6), len(aliments_allergenes)))
            
            for aliment in aliments_testes:
                # Simuler des donn√©es r√©alistes
                times_eaten = random.randint(5, 25)
                
                # Probabilit√© de r√©action bas√©e sur l'aliment
                if "arachides" in aliment.nom.lower():
                    prob_reaction = 0.8  # 80% chance de r√©action aux arachides
                elif "lait" in aliment.nom.lower():
                    prob_reaction = 0.4  # 40% chance de r√©action au lait
                elif "gluten" in aliment.nom.lower():
                    prob_reaction = 0.3  # 30% chance de r√©action au gluten
                else:
                    prob_reaction = 0.2  # 20% chance pour les autres
                
                times_reacted = 0
                for _ in range(times_eaten):
                    if random.random() < prob_reaction:
                        times_reacted += 1
                
                # Cr√©er la r√©action allergique
                reaction = ReactionAllergique(
                    utilisateur_id=utilisateur.id,
                    aliment_id=aliment.id,
                    times_eaten=times_eaten,
                    times_reacted=times_reacted,
                    created_at=datetime.utcnow() - timedelta(days=random.randint(1, 365)),
                    updated_at=datetime.utcnow()
                )
                
                db.session.add(reaction)
                reactions_creees += 1
                
                # Si probabilit√© > 30%, cr√©er une allergie automatique
                probabilite = (times_reacted / times_eaten * 100) if times_eaten > 0 else 0
                if probabilite > 30:
                    # Trouver l'allergie correspondante
                    allergie = None
                    if "arachides" in aliment.nom.lower():
                        allergie = Allergie.query.filter_by(nom="Allergie aux arachides").first()
                    elif "lait" in aliment.nom.lower():
                        allergie = Allergie.query.filter_by(nom="Intol√©rance au lactose").first()
                    elif "gluten" in aliment.nom.lower():
                        allergie = Allergie.query.filter_by(nom="Maladie c≈ìliaque").first()
                    
                    if allergie:
                        # V√©rifier si l'allergie n'existe pas d√©j√†
                        allergie_existante = AllergieUtilisateur.query.filter_by(
                            utilisateur_id=utilisateur.id,
                            allergie_id=allergie.id
                        ).first()
                        
                        if not allergie_existante:
                            allergie_utilisateur = AllergieUtilisateur(
                                utilisateur_id=utilisateur.id,
                                allergie_id=allergie.id,
                                gravite_personnelle="S√©v√®re" if probabilite > 60 else "Mod√©r√©e",
                                detectee_automatiquement=True,
                                created_at=datetime.utcnow()
                            )
                            db.session.add(allergie_utilisateur)
                            print(f"  üö® Allergie automatiquement d√©tect√©e: {allergie.nom} ({probabilite:.1f}%)")
        
        db.session.commit()
        print(f"‚úÖ {reactions_creees} r√©actions allergiques cr√©√©es")
        
        # 7. Afficher un r√©sum√©
        print("\nüìä R√âSUM√â DU PEUPLEMENT:")
        print(f"üë• Utilisateurs: {len(utilisateurs)}")
        print(f"ü•ú Aliments allerg√®nes: {len(aliments_allergenes)}")
        print(f"ü§ß R√©actions allergiques: {reactions_creees}")
        
        allergies_utilisateur = AllergieUtilisateur.query.all()
        print(f"üö® Allergies d√©tect√©es automatiquement: {len(allergies_utilisateur)}")
        
        print("\nüéØ DONN√âES PR√äTES POUR D√âMONSTRATION!")
        print("Vous pouvez maintenant tester l'API d'allergies avanc√©es.")

if __name__ == "__main__":
    populate_basic_allergies()
