from app.model import db, Utilisateur, Aliment, Recette, Menu, Buffet, Recommandation, Allergie, Categorie, ReactionAllergique, AllergieUtilisateur
from run import create_app

app = create_app()

def seed_all():
    """Peupler la base de donn√©es avec des donn√©es de test"""
    with app.app_context():
        print("üå± D√©but du seeding...")
        
        # Supprimer et recr√©er les tables
        db.drop_all()
        db.create_all()
        print("‚úÖ Tables recr√©√©es")
        
        # Cr√©er des cat√©gories
        categories = [
            Categorie(nom='Fruits', description='Fruits frais et secs'),
            Categorie(nom='L√©gumes', description='L√©gumes verts et autres'),
            Categorie(nom='C√©r√©ales', description='C√©r√©ales et f√©culents'),
            Categorie(nom='Prot√©ines', description='Viandes, poissons, ≈ìufs'),
            Categorie(nom='Produits laitiers', description='Lait, fromages, yaourts')
        ]
        
        for cat in categories:
            db.session.add(cat)
        db.session.commit()
        print(f"‚úÖ {len(categories)} cat√©gories ajout√©es")
        
        # Cr√©er des aliments de test
        aliments = [
            Aliment(
                nom='Pomme',
                description='Fruit rouge ou vert, riche en fibres',
                calories=52,
                proteines=0.3,
                glucides=14,
                lipides=0.2,
                fibres=2.4,
                type_aliment='Fruit',
                categorie_id=1
            ),
            Aliment(
                nom='Brocoli',
                description='L√©gume vert riche en vitamines',
                calories=34,
                proteines=2.8,
                glucides=7,
                lipides=0.4,
                fibres=2.6,
                type_aliment='L√©gume',
                categorie_id=2
            ),
            Aliment(
                nom='Riz complet',
                description='C√©r√©ale compl√®te nutritive',
                calories=111,
                proteines=2.6,
                glucides=23,
                lipides=0.9,
                fibres=1.8,
                type_aliment='C√©r√©ale',
                categorie_id=3
            ),
            Aliment(
                nom='Poulet',
                description='Viande blanche riche en prot√©ines',
                calories=165,
                proteines=31,
                glucides=0,
                lipides=3.6,
                fibres=0,
                type_aliment='Prot√©ine',
                categorie_id=4
            ),
            Aliment(
                nom='Yaourt nature',
                description='Produit laitier ferment√©',
                calories=59,
                proteines=10,
                glucides=3.6,
                lipides=0.4,
                fibres=0,
                type_aliment='Produit laitier',
                categorie_id=5
            ),
            # Aliments allerg√®nes
            Aliment(
                nom='Arachides',
                description='Fruits √† coque, allerg√®ne majeur',
                calories=567,
                proteines=25.8,
                glucides=16.1,
                lipides=49.2,
                fibres=8.5,
                type_aliment='Fruit √† coque',
                categorie_id=4
            ),
            Aliment(
                nom='Lait de vache',
                description='Produit laitier, peut causer des intol√©rances',
                calories=42,
                proteines=3.4,
                glucides=5.0,
                lipides=1.0,
                fibres=0,
                type_aliment='Produit laitier',
                categorie_id=5
            )
        ]
        
        for aliment in aliments:
            db.session.add(aliment)
        db.session.commit()
        print(f"‚úÖ {len(aliments)} aliments ajout√©s")
        
        # Cr√©er des recettes de test
        recettes = [
            Recette(
                nom='Salade de fruits',
                description='Une d√©licieuse salade de fruits frais',
                instructions='Couper les fruits et m√©langer d√©licatement',
                temps_preparation=15,
                difficulte='Facile',
                portions=4
            ),
            Recette(
                nom='Riz aux l√©gumes',
                description='Riz complet saut√© avec l√©gumes de saison',
                instructions='Faire cuire le riz, saut√© les l√©gumes, m√©langer',
                temps_preparation=30,
                difficulte='Moyen',
                portions=2
            ),
            Recette(
                nom='Salade de brocolis',
                description='Salade de brocolis croquants',
                instructions='Blanchir les brocolis, assaisonner',
                temps_preparation=20,
                difficulte='Facile',
                portions=3
            )
        ]
        
        for recette in recettes:
            db.session.add(recette)
        db.session.commit()
        print(f"‚úÖ {len(recettes)} recettes ajout√©es")
        
        # Cr√©er des utilisateurs de test
        utilisateurs = [
            Utilisateur(
                nom='Dupont',
                prenom='Jean',
                email='jean.dupont@example.com',
                age=30,
                poids=75,
                taille=180
            ),
            Utilisateur(
                nom='Martin',
                prenom='Marie',
                email='marie.martin@example.com',
                age=25,
                poids=60,
                taille=165
            ),
            Utilisateur(
                nom='Durand',
                prenom='Pierre',
                email='pierre.durand@example.com',
                age=35,
                poids=80,
                taille=175
            )
        ]
        
        for utilisateur in utilisateurs:
            utilisateur.set_password('password123')
            db.session.add(utilisateur)
        db.session.commit()
        print(f"‚úÖ {len(utilisateurs)} utilisateurs ajout√©s")
        
        # Cr√©er des menus de test
        from datetime import date, timedelta
        menus = [
            Menu(
                nom='Menu √©quilibr√© du jour',
                date=date.today(),
                type_repas='D√©jeuner'
            ),
            Menu(
                nom='Petit-d√©jeuner √©nergique',
                date=date.today(),
                type_repas='Petit-d√©jeuner'
            ),
            Menu(
                nom='D√Æner l√©ger',
                date=date.today() + timedelta(days=1),
                type_repas='D√Æner'
            )
        ]
        
        for menu in menus:
            db.session.add(menu)
        db.session.commit()
        print(f"‚úÖ {len(menus)} menus ajout√©s")
        
        # Cr√©er des allergies de r√©f√©rence
        allergies = [
            Allergie(
                nom='Arachides',
                description='Allergie aux cacahu√®tes et d√©riv√©s',
                gravite='S√©v√®re'
            ),
            Allergie(
                nom='Gluten',
                description='Intol√©rance au gluten',
                gravite='Mod√©r√©'
            ),
            Allergie(
                nom='Lactose',
                description='Intol√©rance au lactose',
                gravite='L√©ger'
            )
        ]
        
        for allergie in allergies:
            db.session.add(allergie)
        db.session.commit()
        print(f"‚úÖ {len(allergies)} allergies ajout√©es")
        
        # Cr√©er des exemples de r√©actions allergiques
        reactions_test = [
            # Jean Dupont - allergique aux arachides (50% de probabilit√©)
            ReactionAllergique(
                utilisateur_id=1,
                aliment_id=6,  # Arachides
                times_eaten=10,
                times_reacted=5
            ),
            # Marie Martin - pas allergique aux pommes (10% de probabilit√©)
            ReactionAllergique(
                utilisateur_id=2,
                aliment_id=1,  # Pomme
                times_eaten=20,
                times_reacted=2
            ),
            # Pierre Durand - allergique au lait (40% de probabilit√©)
            ReactionAllergique(
                utilisateur_id=3,
                aliment_id=7,  # Lait de vache
                times_eaten=15,
                times_reacted=6
            )
        ]
        
        for reaction in reactions_test:
            db.session.add(reaction)
        db.session.commit()
        print(f"‚úÖ {len(reactions_test)} r√©actions allergiques de test ajout√©es")
        
        # Simuler l'ajout automatique d'allergies pour les cas > 30%
        for reaction in reactions_test:
            if reaction.is_allergic():
                # D√©terminer le nom de l'allergie
                aliment = Aliment.query.get(reaction.aliment_id)
                nom_allergie = f"Allergie √† {aliment.nom}"
                
                # Cr√©er l'allergie si elle n'existe pas
                allergie = Allergie.query.filter_by(nom=nom_allergie).first()
                if not allergie:
                    allergie = Allergie(
                        nom=nom_allergie,
                        description=f"Allergie d√©tect√©e automatiquement (probabilit√©: {reaction.probabilite_allergie():.1f}%)",
                        gravite='Mod√©r√©'
                    )
                    db.session.add(allergie)
                    db.session.flush()
                
                # Ajouter √† l'utilisateur
                allergie_utilisateur = AllergieUtilisateur(
                    utilisateur_id=reaction.utilisateur_id,
                    allergie_id=allergie.id,
                    gravite_personnelle='Mod√©r√©',
                    detectee_automatiquement=True
                )
                db.session.add(allergie_utilisateur)
        
        db.session.commit()
        print("‚úÖ Allergies automatiques ajout√©es")
        
        print("üéâ Seeding termin√© avec succ√®s !")
        print("\nüìä R√âSUM√â :")
        print(f"‚Ä¢ {len(categories)} cat√©gories")
        print(f"‚Ä¢ {len(aliments)} aliments")
        print(f"‚Ä¢ {len(recettes)} recettes")
        print(f"‚Ä¢ {len(utilisateurs)} utilisateurs")
        print(f"‚Ä¢ {len(menus)} menus")
        print(f"‚Ä¢ {len(allergies)} allergies de r√©f√©rence")
        print(f"‚Ä¢ {len(reactions_test)} r√©actions allergiques de test")
        
        # Afficher les probabilit√©s d'allergies
        print("\nüß™ PROBABILIT√âS D'ALLERGIES :")
        for reaction in reactions_test:
            aliment = Aliment.query.get(reaction.aliment_id)
            utilisateur = Utilisateur.query.get(reaction.utilisateur_id)
            print(f"‚Ä¢ {utilisateur.prenom} {utilisateur.nom} - {aliment.nom}: {reaction.probabilite_allergie():.1f}% ({'ALLERGIQUE' if reaction.is_allergic() else 'OK'})")

if __name__ == '__main__':
    seed_all()